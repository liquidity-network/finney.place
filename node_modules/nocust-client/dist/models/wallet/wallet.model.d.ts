import { Eon } from './eon.model';
import { Mutex } from 'async-mutex';
import { Signature } from '../primitives/signature.model';
import { ActiveState } from '../transactions/active-state.model';
import BigNumber from 'bignumber.js';
import { MinimumAvailableBalanceMarker } from '../transactions/minimum-balance-marker.model';
export declare class Wallet {
    private _address;
    private _networkId;
    private _contractOwnerAddress;
    private _contractAddress;
    private _tokenAddress;
    private _webAddress;
    private _registered;
    private _registrationEon;
    private _trailIdentifier;
    private _pendingRegistrationApproval;
    private _registrationApproval;
    private _eons;
    private _latestEonNumber;
    private _onChainBalance;
    private _lock;
    constructor(_address: string, _networkId: number, _contractOwnerAddress: string, _contractAddress: string, _tokenAddress: string, _webAddress: string);
    static fromJSON(jsonObj: any): Wallet;
    readonly json: {
        address: string;
        networkId: number;
        contractOwnerAddress: string;
        contractAddress: string;
        tokenAddress: string;
        webAddress: string;
        trailIdentifier: number;
        registered: boolean;
        registrationEon: number;
        pendingRegistrationApproval: boolean;
        registrationApproval: {
            address: string;
            checksum: string;
            r: string;
            s: string;
            v: string;
        };
        eons: {};
        latestEonNumber: number;
        onChainBalance: BigNumber;
    };
    readonly isRegistered: boolean;
    readonly isPendingRegistrationApproval: boolean;
    readonly address: string;
    readonly contractAddress: string;
    readonly contractOwnerAddress: string;
    readonly tokenAddress: string;
    readonly networkId: number;
    readonly trailIdentifier: number;
    readonly webAddress: string;
    readonly latestEon: Eon;
    readonly previousEon: Eon;
    readonly secondPreviousEon: Eon;
    readonly lock: Mutex;
    readonly registrationEon: number;
    getAdmissionActiveState(eon: number, trailIdentifier?: number): ActiveState;
    markRegistered(signature: Signature, trailIdentifier: number): void;
    readonly registrationApproval: Signature;
    markPendingRegistrationApproval(eon: number): void;
    unmarkPendingRegistrationApproval(): void;
    getEon(eonNumber: number): Eon;
    addEon(eon: Eon): boolean;
    addEonForce(eon: Eon): void;
    readonly withdrawableAmount: BigNumber;
    onChainBalance: BigNumber;
    readonly offChainBalance: BigNumber;
    readonly minimumAvailableBalanceMarker: MinimumAvailableBalanceMarker;
    getEonSwapStartingBalance(eonNumber: number): BigNumber;
}
