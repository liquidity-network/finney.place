import BigNumber from 'bignumber.js';
export declare class ContractState {
    networkId?: number;
    genesis?: number;
    block?: number;
    currentEonNumber?: number;
    currentSubBlock?: number;
    blocksPerEon?: number;
    slackPeriod?: number;
    extendedSlackPeriod?: number;
    eonsKept?: number;
    depositsKept?: number;
    contractBalance?: BigNumber;
    hasOutstandingChallenges?: boolean;
    slackingChallenges?: number;
    challengeCost?: BigNumber;
    onChainBalance?: BigNumber;
    pendingWithdrawals?: {
        amount: BigNumber;
        eonNumber: number;
    }[];
    deposits: BigNumber[];
    timestamp: number;
    LatestEonsData?: {
        eonNumber: number;
        merkleRoot: string;
        liveChallenges: number;
    }[];
    private syncPeriod;
    static EMPTY_STATE: ContractState;
    constructor(networkId?: number, genesis?: number, block?: number, currentEonNumber?: number, currentSubBlock?: number, blocksPerEon?: number, slackPeriod?: number, extendedSlackPeriod?: number, eonsKept?: number, depositsKept?: number, contractBalance?: BigNumber, hasOutstandingChallenges?: boolean, slackingChallenges?: number, challengeCost?: BigNumber, onChainBalance?: BigNumber, pendingWithdrawals?: {
        amount: BigNumber;
        eonNumber: number;
    }[], deposits?: BigNumber[], timestamp?: number, LatestEonsData?: {
        eonNumber: number;
        merkleRoot: string;
        liveChallenges: number;
    }[]);
    static fromJSON(jsonObj: any): ContractState;
    readonly json: {
        networkId: number;
        genesis: number;
        block: number;
        currentEon: number;
        currentSubBlock: number;
        blocksPerEon: number;
        slackPeriod: number;
        extendedSlackPeriod: number;
        eonsKept: number;
        depositsKept: number;
        lastSubmissionEon: number;
        contractBalance: string;
        lastCheckpointSubmitted: string;
        hasOutstandingChallenges: boolean;
        liveChallenges: number;
        slackingChallenges: number;
        challengeCost: string;
        onChainBalance: string;
        pendingWithdrawals: {
            eonNumber: number;
            amount: string;
        }[];
        deposits: string[];
        timestamp: number;
        LatestEonsData: {
            eonNumber: number;
            merkleRoot: string;
            liveChallenges: number;
        }[];
    };
    readonly isCheckpointSubmitted: boolean;
    readonly isStateSynced: boolean;
    readonly isPunished: boolean;
    readonly lastSubmissionEon: number;
    readonly lastCheckpointSubmitted: string;
    readonly liveChallenges: number;
    readonly hasMissedCheckpointSubmission: boolean;
}
