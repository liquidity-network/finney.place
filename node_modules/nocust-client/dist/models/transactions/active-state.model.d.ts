import BigNumber from 'bignumber.js';
import { Transfer } from './transfer.model';
import { MerkleTree } from '../primitives/merkle-tree.model';
import { Hashable } from '../primitives/hashable.model';
import { DeliveryProofDataInterface, SwapMatchedAmountsInterface } from '../../interfaces/data.interface';
export declare class ActiveState extends Hashable {
    private _contractAddress;
    private _tokenAddress;
    private _walletAddress;
    private _trailIdentifier;
    private _eonNumber;
    private _transfers;
    private _transferTree;
    private _transferLeaves;
    private _pendingTransfer;
    private _spent;
    private _gained;
    private _passivelyGained;
    private _pendingReceipt;
    constructor(_contractAddress: string, _tokenAddress: string, _walletAddress: string, _trailIdentifier: number, _eonNumber: number);
    static fromJSON(jsonObj: any): ActiveState;
    static checksum(contractAddress: string, tokenAddress: string, walletAddress: string, trailIdentifier: number, eonNumber: number, transferSetRoot: string, spent: BigNumber, gained: BigNumber): string;
    readonly hash: string;
    readonly json: {
        contractAddress: string;
        tokenAddress: string;
        walletAddress: string;
        trailIdentifier: number;
        eonNumber: number;
        transfers: {
            tokenAddress: string;
            address: string;
            eonNumber: number;
            amount: string;
            amountSwapped: string;
            startingBalance: string;
            recipientTokenAddress: string;
            recipient: string;
            recipientTrailIdentifier: number;
            target: string;
            nonce: string;
            txId: number;
            authorizations: any;
            confirmations: any;
            deliveryProof: DeliveryProofDataInterface;
            amountsMatched: SwapMatchedAmountsInterface;
            isPassive: boolean;
            passiveOffset: any;
            isPassiveFinalized: boolean;
        }[];
        pendingTransfer: {
            tokenAddress: string;
            address: string;
            eonNumber: number;
            amount: string;
            amountSwapped: string;
            startingBalance: string;
            recipientTokenAddress: string;
            recipient: string;
            recipientTrailIdentifier: number;
            target: string;
            nonce: string;
            txId: number;
            authorizations: any;
            confirmations: any;
            deliveryProof: DeliveryProofDataInterface;
            amountsMatched: SwapMatchedAmountsInterface;
            isPassive: boolean;
            passiveOffset: any;
            isPassiveFinalized: boolean;
        };
        spent: BigNumber;
        gained: BigNumber;
        pendingReceipt: BigNumber;
        passivelyGained: BigNumber;
    };
    readonly isTransferPending: boolean;
    readonly transfers: Transfer[];
    readonly pendingTransfer: Transfer;
    readonly latestTransfer: Transfer;
    readonly lastConfirmedTransfer: Transfer;
    readonly amount: BigNumber;
    readonly spent: BigNumber;
    readonly gained: BigNumber;
    readonly passivelyGained: BigNumber;
    readonly pendingReceipt: BigNumber;
    readonly tokenAddress: string;
    readonly walletAddress: string;
    readonly trailIdentifier: number;
    readonly eonNumber: number;
    readonly transferTree: MerkleTree;
    createIncomingTransfer(sender: string, amount: BigNumber, nonce: BigNumber, txId: number, isPassive: boolean): Transfer;
    createIncomingSwap(sender: string, senderTokenAddress: string, amount: BigNumber, amountSwapped: BigNumber, startingBalance: BigNumber, nonce: BigNumber, txId?: number): Transfer;
    fulfillPendingSwap(): boolean;
    finalizePendingSwap(): boolean;
    cancelPendingSwap(): boolean;
    cancelNonFinalizedPendingSwap(): void;
    confirmPendingIncomingTransfer(): boolean;
    confirmPendingOutgoingTransfer(): boolean;
    private confirmPendingTransfer;
    cancelPendingTransfer(): void;
    createOutgoingTransfer(recipient: string, recipientTrailIdentifier: number, amount: BigNumber, isPassive: boolean, nonce?: BigNumber, txId?: number, passiveOffset?: BigNumber): Transfer;
    createOutgoingSwap(recipient: string, recipientTokenAddress: string, recipientTrailIdentifier: number, amount: BigNumber, amountSwapped: BigNumber, startingBalance: BigNumber, nonce?: BigNumber, txId?: number): Transfer;
    private recalculateTransactionTree;
}
