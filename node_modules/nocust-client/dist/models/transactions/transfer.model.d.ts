import BigNumber from 'bignumber.js';
import { Hashable } from '../primitives/hashable.model';
import { Signature } from '../primitives/signature.model';
import { ActiveStateDataInterface, DeliveryProofDataInterface, SwapMatchedAmountsInterface } from '../../interfaces/data.interface';
import { TransferActiveStateUpdateType } from './transfer-active-state-update-type.model';
export declare class Transfer extends Hashable {
    private _tokenAddress;
    private _address;
    private _eonNumber;
    private _amount;
    private _amountSwapped;
    private _startingBalance;
    private _recipientTokenAddress;
    private _recipient;
    private _recipientTrailIdentifier;
    private _target;
    private _nonce;
    private _txId;
    private _isPassive;
    private _passiveOffset;
    private _isPassiveFinalized;
    private _authorizations;
    private _confirmations;
    private _deliveryProof;
    private _amountsMatched;
    static PADDING_TRANSFER: Transfer;
    static FULFILLED_SWAP_MARKER: BigNumber;
    constructor(_tokenAddress: string, _address: string, _eonNumber: number, _amount: BigNumber, _amountSwapped: BigNumber, _startingBalance: BigNumber, _recipientTokenAddress: string, _recipient: string, _recipientTrailIdentifier: number, _target: string, _nonce: BigNumber, _txId: number, _isPassive: boolean, _passiveOffset?: any, _isPassiveFinalized?: boolean);
    static fromJSON(jsonObj: any): Transfer;
    static checksumTransfer(target: string, amount: BigNumber, trailIdentifier: number, nonce: BigNumber, isPassive: boolean, passiveOffset?: BigNumber): string;
    static checksumSwap(sourceToken: string, destinationToken: string, trailIdentifier: number, amount: BigNumber, amountSwapped: BigNumber, startingBalance: BigNumber, nonce: BigNumber): string;
    static checksumSwapFreeze(sourceToken: string, destinationToken: string, nonce: BigNumber): string;
    readonly json: {
        tokenAddress: string;
        address: string;
        eonNumber: number;
        amount: string;
        amountSwapped: string;
        startingBalance: string;
        recipientTokenAddress: string;
        recipient: string;
        recipientTrailIdentifier: number;
        target: string;
        nonce: string;
        txId: number;
        authorizations: any;
        confirmations: any;
        deliveryProof: DeliveryProofDataInterface;
        amountsMatched: SwapMatchedAmountsInterface;
        isPassive: boolean;
        passiveOffset: any;
        isPassiveFinalized: boolean;
    };
    readonly isSwap: boolean;
    readonly isSwapActive: boolean;
    readonly isSwapFulfilled: boolean;
    readonly isSwapFrozen: boolean;
    readonly isSwapCancelled: boolean;
    readonly isSwapFinalized: boolean;
    readonly txId: number;
    readonly isPassive: boolean;
    readonly passiveOffset: any;
    readonly hash: string;
    readonly cancellationHash: string;
    readonly tokenAddress: string;
    readonly recipientTokenAddress: string;
    readonly startingBalance: BigNumber;
    readonly sender: string;
    readonly eonNumber: number;
    readonly amount: BigNumber;
    readonly amountSwapped: BigNumber;
    readonly recipient: string;
    readonly recipientTrailIdentifier: number;
    readonly nonce: BigNumber;
    readonly confirmations: Map<TransferActiveStateUpdateType, Signature>;
    readonly authorizations: Map<TransferActiveStateUpdateType, ActiveStateDataInterface>;
    readonly deliveryProof: DeliveryProofDataInterface;
    saveDeliveryProof(proof: DeliveryProofDataInterface): Transfer;
    amountsMatched: SwapMatchedAmountsInterface;
    finalizePassive(): void;
}
