import { Web3ServiceInterface } from '../web3-service.interface';
import { Signature } from '../..';
import { RPCClientProviderInterface } from '../rpc-client-provider.interface';
import { BigNumber } from 'bignumber.js';
import { ABIDefinition } from 'web3/eth/abi';
import { TransactionReceipt } from 'web3/types';
export declare class EthereumRPCService implements Web3ServiceInterface {
    web3Provider: RPCClientProviderInterface;
    cachedNetworkId: number;
    constructor(web3Provider: RPCClientProviderInterface);
    readonly rpc: any;
    readonly isConnected: Promise<boolean>;
    readonly accounts: Promise<string[]>;
    readonly privateAccounts: string[];
    readonly currentProvider: any;
    readonly canSignPersonal: boolean;
    getContractAt(abi: ABIDefinition[], contractAddress: string): any;
    networkId(): Promise<number>;
    latestBlockNumber(): Promise<number>;
    balanceOf(address: string): Promise<BigNumber>;
    signPersonalMessage(data: string, account: string): Promise<string>;
    signRawDigest(data: string, account: string): Promise<string>;
    recoverPersonalSigningAddress(data: any, signature: Signature): Promise<string>;
    mineTestBlock(): Promise<any>;
    getOnChainTransactionReceipt(txHash: string): Promise<TransactionReceipt>;
}
