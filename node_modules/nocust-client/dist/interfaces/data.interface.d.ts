import BigNumber from 'bignumber.js';
export interface RegistrationDataInterface {
    readonly eon_number: number;
    readonly wallet_signature: string;
    readonly operator_signature: string;
    readonly trail_identifier: number;
}
export interface BlockchainViewDataInterface {
    readonly block: number;
    readonly eon_number: number;
}
export interface OperatorStatusDataInterface {
    readonly latest: BlockchainViewDataInterface;
    readonly confirmed: BlockchainViewDataInterface;
}
export interface OperatorTokenListDataInterface {
    readonly address: string;
    readonly name: string;
    readonly short_name: string;
}
export interface MerkleProofDataInterface {
    readonly eon_number: number;
    readonly left: string;
    readonly right: string;
    readonly allotment_chain: string[];
    readonly membership_chain: string[];
    readonly values: string[];
    readonly trail: number;
    readonly active_state_checksum: string;
    readonly passive_checksum: string;
    readonly passive_amount: string;
    readonly passive_marker: string;
}
export interface LimitedActiveStateDataInterface {
    readonly wallet_signature: string;
    readonly operator_signature: string;
    readonly updated_spendings: string;
    readonly updated_gains: string;
    readonly tx_set_hash: string;
}
export interface ActiveStateDataInterface extends LimitedActiveStateDataInterface {
    readonly tx_set_proof: string[];
    readonly tx_set_index: number;
}
export interface DeliveryProofDataInterface {
    readonly merkle_proof: MerkleProofDataInterface;
    readonly transfer_membership_chain: string[];
    readonly transfer_membership_trail: number;
    readonly final_active_state: LimitedActiveStateDataInterface;
}
export interface TransferWalletDataInterface {
    readonly address: string;
    readonly token: string;
}
export interface SwapMatchedAmountsInterface {
    readonly in: string;
    readonly out: string;
}
export interface TransferDataInterface {
    readonly id: number;
    readonly amount: string;
    readonly amount_swapped: string;
    readonly wallet: TransferWalletDataInterface;
    readonly wallet_trail_identifier: number;
    readonly recipient: TransferWalletDataInterface;
    readonly recipient_trail_identifier: number;
    readonly nonce: string;
    readonly sender_active_state: ActiveStateDataInterface;
    readonly recipient_active_state: ActiveStateDataInterface;
    readonly recipient_fulfillment_active_state: ActiveStateDataInterface;
    readonly recipient_finalization_active_state: ActiveStateDataInterface;
    readonly swap_freezing_signature: string;
    readonly sender_cancellation_active_state: ActiveStateDataInterface;
    readonly recipient_cancellation_active_state: ActiveStateDataInterface;
    readonly eon_number: number;
    readonly processed: boolean;
    readonly complete: boolean;
    readonly voided: boolean;
    readonly cancelled: boolean;
    readonly delivery_proof?: DeliveryProofDataInterface;
    readonly matched_amounts: SwapMatchedAmountsInterface;
    readonly appended: boolean;
    readonly passive: boolean;
    readonly position: BigNumber;
    readonly time: string;
}
export interface DepositDataInterface {
    readonly txid: string;
    readonly block: number;
    readonly eon_number: number;
    readonly amount: string;
    readonly time: string;
}
export interface WithdrawalRequestDataInterface extends DepositDataInterface {
    readonly slashed: boolean;
}
export interface WithdrawalDataInterface extends DepositDataInterface {
    readonly request: WithdrawalRequestDataInterface;
}
export interface WalletDataInterface {
    readonly registration: RegistrationDataInterface;
    readonly merkle_proofs: MerkleProofDataInterface[];
    readonly transfers: TransferDataInterface[];
    readonly deposits: DepositDataInterface[];
    readonly withdrawal_requests: WithdrawalRequestDataInterface[];
    readonly withdrawals: WithdrawalDataInterface[];
}
export interface WalletMetadataInterface {
    readonly address: string;
    readonly networkId: number;
    readonly contractAddress: string;
    readonly tokenAddress: string;
    readonly webAddress: string;
}
export interface SwapOrderDataInterface {
    readonly amount: string;
    readonly amount_swapped: string;
    readonly remaining_out: string;
    readonly remaining_in: string;
}
export interface OrderBookDataInterface {
    readonly sell_orders: SwapOrderDataInterface[];
    readonly buy_orders: SwapOrderDataInterface[];
}
export interface SLADetailsInterface {
    readonly token: string;
    readonly cost: string;
    readonly recipient: string;
    readonly limit: number;
}
export interface SLAStatusInterface {
    readonly expiry: string;
}
export interface ContractStateVariablesInterface {
    lastCheckpointEonNumber: number;
    merkleRoots: string[];
    liveChallenges: number[];
    currentEonDeposits: BigNumber;
    previousEonDeposits: BigNumber;
    secondPreviousEonDeposits: BigNumber;
    pendingWithdrawals: [number, BigNumber][];
    holderBalance: BigNumber;
}
