import { ContractApiService } from './contract-api.service';
import { Wallet } from '../models/wallet/wallet.model';
import { Signature } from '../models/primitives/signature.model';
import { ProofOfExclusiveAllotment } from '../models/primitives/proof-of-exclusive-allotment.model';
import { WalletUpdateError } from '../models/state/wallet-update-error.model';
import { Transfer } from '../models/transactions/transfer.model';
import { ContractState } from '../models/state/contract-state.model';
import BigNumber from 'bignumber.js';
export declare class DisputeService {
    contractApi: ContractApiService;
    constructor(contractApi: ContractApiService);
    canIssueStateUpdateChallenge(wallet: Wallet, contractState: ContractState): Promise<boolean>;
    private canIssueStateUpdateChallengeInternal;
    canRecoverAllFunds(wallet: Wallet, contractState: ContractState): Promise<boolean>;
    private canRecoverAllFundsInternal;
    canRecoverOnChainFunds(wallet: Wallet, contractState: ContractState): Promise<boolean>;
    private canRecoverOnChainFundsInternal;
    issueStateUpdateChallenge(wallet: Wallet, contractState: ContractState, gasPrice: BigNumber, gas: number): Promise<any>;
    checkStateUpdateChallengeResponse(wallet: Wallet, contractState: ContractState): Promise<[ProofOfExclusiveAllotment, Signature]>;
    resolveOnChainStateUpdateDispute(wallet: Wallet, proofOfExclusiveAllotment: ProofOfExclusiveAllotment, operatorActiveStateUpdateSig: Signature): Promise<WalletUpdateError>;
    private resolveOnChainStateUpdateDisputeInternal;
    static canIssueDeliveryChallenge(wallet: Wallet, transfer: Transfer, contractState: ContractState): boolean;
    issueDeliveryChallenge(wallet: Wallet, transfer: Transfer, contractState: ContractState, gasPrice: BigNumber, gas: number): Promise<any>;
}
