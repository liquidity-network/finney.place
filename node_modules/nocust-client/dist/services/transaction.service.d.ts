import BigNumber from 'bignumber.js';
import { Wallet } from '../models/wallet/wallet.model';
import { PreparedTransfer } from '../models/transactions/prepared-transfer.model';
import { PreparedSwap, PreparedSwapCancellation, PreparedSwapFinalization } from '../models/transactions/prepared-swap.model';
import { Signature } from '../models/primitives/signature.model';
import { Transfer } from '../models/transactions/transfer.model';
import { OperatorApiService } from '../services/operator-api.service';
import { ContractApiService } from '../services/contract-api.service';
export declare class TransactionService {
    operatorApiService: OperatorApiService;
    contractApiService: ContractApiService;
    constructor(operatorApiService: OperatorApiService, contractApiService: ContractApiService);
    prepareSwap(senderWallet: Wallet, recipientWallet: Wallet, amount: BigNumber, amountSwapped: BigNumber, nonce?: BigNumber): Promise<PreparedSwap>;
    sendSwap(senderWallet: Wallet, recipientWallet: Wallet, preparedSwap: PreparedSwap, senderActiveStateSignature: Signature, recipientActiveStateSignature: Signature, fulfillmentActiveStateSignature: Signature, balanceSignature: Signature): Promise<number>;
    sendSwapFreeze(wallet: Wallet, swap: Transfer, freezeSignature: Signature): Promise<boolean>;
    prepareSwapFinalization(wallet: Wallet, swap: Transfer): PreparedSwapFinalization;
    sendSwapFinalization(wallet: Wallet, swap: Transfer, finalizationSignature: Signature): Promise<boolean>;
    prepareSwapCancellation(wallet: Wallet, swap: Transfer): PreparedSwapCancellation;
    sendSwapCancellation(wallet: Wallet, swap: Transfer, senderCancellationSignature: Signature, recipientCancellationSignature: Signature): Promise<boolean>;
    prepareOutgoingTransfer(wallet: Wallet, recipientAddress: string, amount: BigNumber, isPassive: boolean, nonce?: BigNumber): Promise<PreparedTransfer>;
    sendOutgoingTransfer(wallet: Wallet, preparedTransfer: PreparedTransfer, activeStateSignature: Signature, balanceSignature: Signature): Promise<number>;
    prepareReceipt(wallet: Wallet, transfer: Transfer): PreparedTransfer;
    sendIncomingTransferReceipt(wallet: Wallet, preparedTransfer: PreparedTransfer, activeStateSignature: Signature): Promise<boolean>;
}
