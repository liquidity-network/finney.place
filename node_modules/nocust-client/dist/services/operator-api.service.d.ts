import { PreparedSwap } from './../models/transactions/prepared-swap.model';
import { RestApiInterface } from '../interfaces/rest-api.interface';
import { Transfer } from '../models/transactions/transfer.model';
import { Wallet } from '../models/wallet/wallet.model';
import { OperatorStatusDataInterface, OperatorTokenListDataInterface, OrderBookDataInterface, RegistrationDataInterface, SLADetailsInterface, SLAStatusInterface, TransferDataInterface, WalletDataInterface, TransferWalletDataInterface } from '../interfaces/data.interface';
import { Signature } from '../models/primitives/signature.model';
import 'reflect-metadata';
import { PreparedTransfer } from '../models/transactions/prepared-transfer.model';
import { Observable } from 'rxjs';
export declare enum SocketMessageType {
    INCOMING_TRANSFER = "incoming_transfer",
    INCOMING_RECEIPT = "incoming_receipt",
    INCOMING_CONFIRMATION = "incoming_confirmation",
    INCOMING_TIMEOUT = "timeout_transfer",
    MATCHED_SWAP = "matched_swap",
    FINALIZED_SWAP = "finalized_swap",
    REGISTERED_WALLET = "registered_wallet"
}
export declare enum TransactionSocketMessageType {
    INCOMING_TRANSFER = "incoming_transfer",
    INCOMING_RECEIPT = "incoming_receipt",
    INCOMING_CONFIRMATION = "incoming_confirmation",
    INCOMING_TIMEOUT = "timeout_transfer",
    MATCHED_SWAP = "matched_swap",
    FINALIZED_SWAP = "finalized_swap"
}
export declare class OperatorApiService {
    private api;
    socket: any;
    private subscribedAddresses;
    private webSocketUrl;
    private webSocketReconnectInterval;
    private webSocketHealthCheck;
    private pendingWalletSubscriptionResolve;
    private syncMessageObserver;
    private walletSubscriptionLock;
    constructor(api: RestApiInterface);
    getStatusData(webAddress: string): Promise<OperatorStatusDataInterface>;
    getTokensList(webAddress: string): Promise<OperatorTokenListDataInterface[]>;
    getWalletData(address: string, tokenAddress: string, webAddress: string, eonNumber?: number, transferId?: number): Promise<WalletDataInterface>;
    whoisWallet(tokenAddress: string, address: string, webAddress: string): Promise<RegistrationDataInterface>;
    getTransfersFromTxId(txId: number, webAddress: string): Promise<TransferDataInterface>;
    getSwapOrders(leftToken: string, rightToken: string, webAddress: string, eonNumber?: number): Promise<OrderBookDataInterface>;
    register(wallet: Wallet, authorization: Signature): Promise<any>;
    getSLADetails(wallet: Wallet): Promise<SLADetailsInterface>;
    getSLAStatus(wallet: Wallet): Promise<SLAStatusInterface>;
    sendTransfer(wallet: Wallet, preparedTransfer: PreparedTransfer, signature: Signature, balanceSignature: Signature): Promise<TransferDataInterface>;
    sendSwap(senderWallet: Wallet, recipientWallet: Wallet, preparedSwap: PreparedSwap, senderActiveStateSignature: Signature, recipientActiveStateSignature: Signature, fulfillmentActiveStateSignature: Signature, balanceSignature: Signature): Promise<TransferDataInterface>;
    sendSwapFreeze(wallet: Wallet, swap: Transfer, freezeSignature: Signature): Promise<any>;
    sendSwapCancellation(wallet: Wallet, swap: Transfer, senderCancellationSignature: Signature, recipientCancellationSignature: Signature): Promise<any>;
    sendSwapFinalization(wallet: Wallet, swap: Transfer, finalizationSignature: Signature): Promise<any>;
    sendReceipt(wallet: Wallet, id: number, signature: Signature): Promise<any>;
    isWebSocketConnectionOpen(): boolean;
    private toWebSocketUrl;
    private initSocket;
    private subscribeToWallet;
    private initiateSocketAndSubscribeWallet;
    registerOperatorRegistrationWebSocketNotificationCallback(params: {
        webAddress: string;
        walletAddress: string;
        tokenAddress?: string;
    }): Promise<Observable<TransferWalletDataInterface>>;
    registerTransferWebSocketNotificationCallback(params: {
        webAddress: string;
        walletAddress: string;
        socketMessageType?: TransactionSocketMessageType;
        tokenAddress?: string;
        txId?: number;
        nonce?: string;
    }): Promise<Observable<TransferDataInterface>>;
}
