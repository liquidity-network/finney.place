import BigNumber from 'bignumber.js';
import { TexSubAccount } from '../models/wallet/tex-sub-account.model';
import { ContractApiService } from './contract-api.service';
import { OperatorApiService } from './operator-api.service';
import { ContractStateService } from './contract-state.service';
import { OperatorStateService } from './operator-state.service';
import { TransactionService } from './transaction.service';
import { WalletStateService } from './wallet-state.service';
import { WalletStorageService } from './wallet-storage.service';
import { Web3ServiceInterface } from '../interfaces/web3-service.interface';
import { StorageManagerInterface } from '../interfaces/storage-manager.interface';
import { TransferDataInterface } from '../interfaces/data.interface';
export declare class TexService {
    private contractApiService;
    private operatorApiService;
    private operatorStateService;
    private contractStateService;
    private walletStateService;
    private web3Service;
    walletStorageService: WalletStorageService;
    transactionService: TransactionService;
    private storage;
    constructor(contractApiService: ContractApiService, operatorApiService: OperatorApiService, operatorStateService: OperatorStateService, contractStateService: ContractStateService, walletStateService: WalletStateService, web3Service: Web3ServiceInterface, walletStorageService: WalletStorageService, transactionService: TransactionService, storage: StorageManagerInterface);
    private registerAddress;
    private getOrCreateWallet;
    private registerWallet;
    private makeTransfer;
    private finalizeSwap;
    private getOperatorParameters;
    private getSyncedWallet;
    private harvestSwapWallet;
    private processSwapWallet;
    getSubAccountSeed(address: string, message?: string): Promise<string>;
    getSubAccountAtIndex(seed: string, index: number): TexSubAccount;
    swapSyncProcedure(params: {
        address: string;
        buyTokenAddress: string;
        sellTokenAddress: string;
        seed: string;
        operatorApiUrl: string;
        contractAddress: string;
        forceAdmission: boolean;
    }): Promise<{
        freeSubAccountIndexes: number[];
        blockedSubAccountIndexes: number[];
        pendingSwaps: TransferDataInterface[];
    }>;
    setCachedReusableSubAccountIndex(address: string, token1: string, token2: string, freeSubAccountIndexes: any, blockedSubAccountIndexes: any): Promise<void>;
    getCachedResuableSubAccountIndex(address: string, token1: string, token2: string): Promise<{
        freeSubAccountIndexes: any[];
        blockedSubAccountIndexes: any[];
    }>;
    makeNonBlockingSwap(params: {
        address: string;
        buyTokenAddress: string;
        sellTokenAddress: string;
        buyAmount: BigNumber;
        sellAmount: BigNumber;
        operatorApiUrl: string;
        contractAddress: string;
        subAccount?: TexSubAccount;
        customSeed?: string;
    }): Promise<number>;
}
