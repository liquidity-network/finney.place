import { Wallet } from '../models/wallet/wallet.model';
import { Observable, Observer } from 'rxjs';
import { OperatorState } from '../models/state/operator-state.model';
import { ContractState } from '../models/state/contract-state.model';
import { ContractApiService } from './contract-api.service';
import { OperatorApiService } from './operator-api.service';
import { WalletState } from '../models/state/wallet-state.model';
import { StateUpdatePoll } from '../models/state/state-poll.model';
export declare class WalletStateService {
    walletStatePollObservable: Observable<StateUpdatePoll>;
    private operatorStateFetchObservable;
    private contractStateFetchObservable;
    private walletStateSyncObserver;
    private contractApi;
    private operatorApi;
    constructor(walletStatePollObservable: Observable<StateUpdatePoll>, operatorStateFetchObservable: Observable<OperatorState>, contractStateFetchObservable: Observable<ContractState>, walletStateSyncObserver: Observer<WalletState>, contractApi: ContractApiService, operatorApi: OperatorApiService);
    syncWalletState(wallet: Wallet, contractState: ContractState, operatorState: OperatorState, isLightSync?: boolean): Promise<WalletState>;
    private updateOnChainData;
    private updatePendingRegistrationState;
    private updateRegistrationState;
    private updateOlderEonStates;
    private updatePreviousEonState;
    private updateCurrentEonState;
    private updateLatestLocalEonProofOfExclusiveAllotment;
    private updateLatestEonActiveState;
    private updateLatestEonActiveStateTransactions;
    private updateLatestEonActiveStateTransfers;
    private updateLatestEonActiveStateSwaps;
    private updateLatestEonWithdrawalRequests;
    private updateLatestEonOnChainWithdrawal;
    private updateLatestEonDeposits;
    private updateCurrentEonOnChainDeposits;
    private updateLatestEonDeliveryReceipts;
    private updateDeliveryReceipt;
    private progressEon;
    private updateLightSyncEon;
}
